// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type PagesPageConfig = {
  default: React.ComponentType<any> | ((props: any) => React.ReactNode | Promise<React.ReactNode> | never | void)
  getStaticProps?: (context: any) => Promise<any> | any
  getStaticPaths?: (context: any) => Promise<any> | any
  getServerSideProps?: (context: any) => Promise<any> | any
  getInitialProps?: (context: any) => Promise<any> | any
  /**
   * Segment configuration for legacy Pages Router pages.
   * Validated at build-time by parsePagesSegmentConfig.
   */
  config?: {
    amp?: boolean | 'hybrid' | string // necessary for JS
    maxDuration?: number
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    regions?: string[]
  }
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}


// Validate ../../app/auth/page.tsx
{
  const handler = {} as typeof import("../../app/auth/page.js")
  handler satisfies AppPageConfig<"/auth">
}

// Validate ../../app/course/[courseId]/page.tsx
{
  const handler = {} as typeof import("../../app/course/[courseId]/page.js")
  handler satisfies AppPageConfig<"/course/[courseId]">
}

// Validate ../../app/dashboard/page.tsx
{
  const handler = {} as typeof import("../../app/dashboard/page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ../../app/leaderboard/page.tsx
{
  const handler = {} as typeof import("../../app/leaderboard/page.js")
  handler satisfies AppPageConfig<"/leaderboard">
}

// Validate ../../app/lesson/[lessonId]/page.tsx
{
  const handler = {} as typeof import("../../app/lesson/[lessonId]/page.js")
  handler satisfies AppPageConfig<"/lesson/[lessonId]">
}

// Validate ../../app/page.tsx
{
  const handler = {} as typeof import("../../app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../app/profile/page.tsx
{
  const handler = {} as typeof import("../../app/profile/page.js")
  handler satisfies AppPageConfig<"/profile">
}



// Validate ../../src/pages/AuthPage.tsx
{
  const handler = {} as typeof import("../../src/pages/AuthPage.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/CoursePage.tsx
{
  const handler = {} as typeof import("../../src/pages/CoursePage.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/Dashboard.tsx
{
  const handler = {} as typeof import("../../src/pages/Dashboard.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/LandingPage.tsx
{
  const handler = {} as typeof import("../../src/pages/LandingPage.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/Leaderboard.tsx
{
  const handler = {} as typeof import("../../src/pages/Leaderboard.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/LessonPlayer.tsx
{
  const handler = {} as typeof import("../../src/pages/LessonPlayer.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/ProfilePage.tsx
{
  const handler = {} as typeof import("../../src/pages/ProfilePage.js")
  handler satisfies PagesPageConfig
}



// Validate ../../app/layout.tsx
{
  const handler = {} as typeof import("../../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
